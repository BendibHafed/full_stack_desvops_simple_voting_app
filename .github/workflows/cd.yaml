name: CD

on: 
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "production"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    permissions:
      contents: read
      packages: read # Allows to pull Docker image from GHCR

    steps:
      # 1. Checkout the repos
      - name: Checkout Repo
        uses: actions/checkout@v4

      # 2. Configure AWS credentials (GitHub Actions)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test AWS credentials
        run: aws sts get-caller-identity

       # 3. Ensure Terraform Backend Exists
      - name: Ensure Terraform Backend Exists
        run: |
          set -e
          BUCKET="my-terraform-state-bucket-he1"
          REGION=${{ secrets.AWS_REGION }}
          DYNAMO_TABLE="terraform-locks"

          echo "Checking S3 bucket: $BUCKET"
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
          echo "Creating S3 Bucket!"
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}' || true
          fi

          echo "Checking DynamoDB table: $DYNAMO_TABLE"
          if ! aws dynamodb describe-table --table-name "$DYNAMO_TABLE" >/dev/null 2>&1; then
            echo "Creating DynamoDB lock table..."
            aws dynamodb create-table \
              --table-name "$DYNAMO_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
          fi

      # 4. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      # 5. Terraform Init
      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init -input=false -no-color

      # 6. Terraform Plan
      - name: Terraform plan
        working-directory: infra/terraform
        run: terraform plan -input=false -no-color

      # 7. Terraform Apply
      - name: Terraform apply
        working-directory: infra/terraform
        run: terraform apply -input=false -auto-approve -no-color

      # 8. Get Terraform provisionning Outputs
      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: infra/terraform
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
          echo "RDS_PORT=$(terraform output -raw rds_port)" >> $GITHUB_ENV
          echo "APP_URL=$(terraform output -raw app_url)" >> $GITHUB_ENV

      # 9. Install Ansible and Plugins
      - name: Install Ansible + plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-boto3 python3-botocore

      # 10. Write SSH Private Key
      - name: Write SSH Private Key
        working-directory: infra/ansible
        run: |
          # Write raw PEM private key
          echo "${{ secrets.ANSIBLE_PRIVATE_KEY }}" > ssh_private_key.pem
          chmod 600 ssh_private_key.pem

      # 11 Write Ansible inventory
      - name: Write Ansible inventory
        working-directory: infra/ansible
        run: |
          echo "[voting]" > inventory.ini
          echo "${{ env.EC2_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=ssh_private_key.pem">> inventory.ini
      - name: Debug SSH Key Format
        working-directory: infra/ansible
        run: |
          cat -v ssh_private_key.pem
          file ssh_private_key.pem

      # 12. Test SSH Connection First
      - name: Test SSH Connection
        working-directory: infra/ansible
        run: |
          echo "Testing connection to ${{ env.EC2_IP }}..."
          ssh -i ssh_private_key.pem \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              -o BatchMode=yes \
              ubuntu@${{ env.EC2_IP }} \
              "echo ' SSH connection successful'"
          echo "SSH test passed!"

      # 13. Run Ansible Playbook
      - name: Run Ansible
        working-directory: infra/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          repo_slug=${GITHUB_REPOSITORY,,}
          ansible-playbook -i inventory.ini playbook.yaml \
            --private-key ssh_private_key.pem \
            --extra-vars "github_repo=${repo_slug} \
                          db_user=${{ secrets.DB_USERNAME }} \
                          db_pass=${{ secrets.DB_PASSWORD }} \
                          db_name=${{ secrets.DB_NAME }} \
                          rds_endpoint=${{ env.RDS_ENDPOINT }} \
                          rds_port=${{ env.RDS_PORT }}"

      # 14. Smoke Test
      - name: Run Smoke Test
        working-directory: infra/terraform
        run: |
          APP_URL=$(terraform output -raw app_url)
          echo "Testing app at $APP_URL"
          for i in {1..20}; do
            if curl -fs "$APP_URL/healthz"; then
              echo "App is healthy!"
              exit 0
            fi
            echo "Waiting for app..."
            sleep 5
          done
          echo "App failed health check"
          exit 1
