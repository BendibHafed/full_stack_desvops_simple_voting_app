name: CI

on:
  pull_request:
    branches: ["*"]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voting
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 3. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install flake8

      # 4. Lint Backend
      - name: Lint backend (flake8)
        run: |
          flake8 backend

      # 5. Wait for Postgres to be ready
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U postgres -d voting && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # 6. Run tests
      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/voting
          FLASK_CONFIG: TestingConfig
        run: pytest -v

      # 7. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      # 8. Setup Terraform Plugin Cache
      - name: Setup Terraform Plugin Cache
        working-directory: infra/terraform
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      # 9. Terraform Init (CI-safe)
      - name: Terraform Init (CI-safe)
        working-directory: infra/terraform
        run: |
          rm -rf .terraform
          terraform init -backend=false -input=false -no-color

      # 10. Terraform Format Check
      - name: Terraform Format Check
        working-directory: infra/terraform
        continue-on-error: true
        run: terraform fmt -check -diff -recursive

      # 11. Terraform Validate
      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate -no-color

      # 12. Login Github Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      # 13. Login Github Container Registry (ghcr.io)
      - name: Set lowercase repo slug
        run: echo "REPO_SLUG=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      # 14. build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.REPO_SLUG }}/voting-app:latest
            ghcr.io/${{ env.REPO_SLUG }}/voting-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
