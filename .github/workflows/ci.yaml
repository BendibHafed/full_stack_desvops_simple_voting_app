name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/voting-app

permissions:
  contents: read
  packages: write

jobs:
  lint-backend:
    name: Lint Backend Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Flake8
        run: pip install flake8
      - name: Run Flake8
        run: flake8 backend

  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install CSSLint
        run: npm install -g csslint
      
      - name: Install HTML5Validator
        run: pip install html5validator

      - name: Lint frontend HTML/CSS
        run: |
          html5validator --root frontend/templates
          csslint frontend/static/style.css || true

  lint-infra:
    name: Lint Infra Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.0"

      - name: Setup Terraform Plugin Cache
        working-directory: infra/terraform
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Install Linting Tools
        run: |
          pip install ansible ansible-lint yamllint
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Lint YAML files
        run: yamllint infra/ansible/

      - name: Lint Ansible Playbook
        run: ansible-lint infra/ansible/playbook.yaml

      - name: Terraform Format check
        working-directory: infra/terraform
        continue-on-error: true
        run: terraform fmt -recursive -check

      - name: Terraform Init & Validate
        working-directory: infra/terraform
        run: |
          rm -rf .terraform/
          terraform init -backend=false -input=false -no-color
          terraform validate -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Lint
        run: |
          tflint --init
          tflint --chdir=infra/terraform --force

  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: lint-backend
    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voting
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install Dependencies
        run: pip install -r backend/requirements.txt
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 3
          done
      
      - name: Run Pytest
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/voting
          FLASK_CONFIG: TestingConfig
        run: pytest -v

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, lint-infra]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo slug
        run: echo "REPO_SLUG=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_SLUG }}:latest
            ${{ env.REGISTRY }}/${{ env.REPO_SLUG }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max