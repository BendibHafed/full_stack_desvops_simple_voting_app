name: CI

on:
  pull_request:
    branches: ["*"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ACT: false

permissions:
  contents: read
  packages: write

jobs:
  lint-backend:
    name: Lint Backend Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Flake8
        run: pip install flake8
      - name: Run Flake8
        run: flake8 backend

  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install CSSLint
        run: npm install -g csslint
      
      - name: Install HTML5Validator
        run: pip install html5validator
      - name: Ensure Java is Installed

        run: |
          if ! command -v java >/dev/null 2>&1; then
            echo "Java not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y default-jre
          else
            echo "Java is already installed."          
          fi

      - name: Lint frontend HTML/CSS
        run: |
          html5validator --root frontend/templates
          csslint frontend/static/style.css || true

  lint-infra:
    name: Lint Infra Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.0"

      - name: Setup Terraform Plugin Cache
        working-directory: infra/terraform
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Install Linting Tools
        run: |
          pip install ansible ansible-lint yamllint
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Lint YAML files
        run: yamllint infra/ansible/

      - name: Lint Ansible Playbook
        run: ansible-lint infra/ansible/playbook.yaml

      - name: Terraform Format check
        working-directory: infra/terraform
        continue-on-error: true
        run: terraform fmt -recursive -check

      - name: Terraform Init & Validate (Local or Remote)
        working-directory: infra/terraform
        run: |
          rm -rf .terraform/
          if [ "$ACT" = "true" ]; then
            echo "Running Terraform in local mode"
            terraform init -backend=false -input=false -no-color
          else
            echo "Running Terraform with backend"
             terraform init -input=false -no-color
          fi
          terraform validate -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Lint
        run: |
          tflint --init
          tflint --chdir=infra/terraform --force

  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: lint-backend
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voting
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: pip install -r backend/requirements.txt

      - name: Install PostgreSQL Client
        run: |
          if [ "$ACT" = "true" ]; then
            echo "PostgreSQL client tools are not installed in the act runner container"
            echo "Insalling PostgreSQL client..."
            sudo apt-get update
            sudo apt-get install -y postgresql-client
          fi

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL on port 5432..."
            sleep 3
          done
      
      - name: Run Pytest
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/voting
          FLASK_CONFIG: TestingConfig
        run: pytest -v

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: 
      - test-backend
      - lint-infra
      - lint-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR (Remote only)
        if: ${{ env.ACT != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image (Local)
        if: ${{ env.ACT == 'true' }}
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}/voting-app" | tr '[:upper:]' '[:lower:]')
          docker build -t $REGISTRY/$IMAGE_NAME:latest -f backend/Dockerfile .
          docker tag $REGISTRY/$IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:${{ github.sha }}

      - name: Build and Push Docker Image (Remote)
        if: ${{ env.ACT != 'true' }}
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}/voting-app" | tr '[:upper:]' '[:lower:]')
          docker build -t $REGISTRY/$IMAGE_NAME:latest -f backend/Dockerfile .
          docker tag $REGISTRY/$IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          docker push $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}
