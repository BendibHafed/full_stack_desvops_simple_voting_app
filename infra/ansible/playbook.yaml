---
- name: Deploy Voting App
  hosts: voting
  become: true

  pre_tasks:
    - name: Ensure Python is installed (for Ansible facts)
      ansible.builtin.raw: |
        if ! command -v python3 >/dev/null 2>&1; then
          sudo apt-get update -y && sudo apt-get install -y python3
        fi
      changed_when: false

  vars:
    docker_image: "ghcr.io/{{ github_repo }}/voting-app:latest"
    db_url: >
      postgresql+psycopg2://{{ db_user }}:{{ db_pass }}
      @{{ rds_endpoint }}:{{ rds_port }}/{{ db_name }}

  tasks:
    - name: Install Docker + Docker Compose + Dependencies
      ansible.builtin.apt:
        name:
          - python3-pip
          - docker.io
          - docker-compose
        state: present
        update_cache: true

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name: docker

    - name: Create app directory
      ansible.builtin.file:
        path: /home/ubuntu/voting-app
        state: directory
        owner: ubuntu
        mode: '0755'

    - name: Create log directory
      ansible.builtin.file:
        path: /home/ubuntu/voting-app/logs
        state: directory
        owner: ubuntu
        mode: '0755'

    - name: Generate docker-compose.yaml securely
      ansible.builtin.copy:
        dest: /home/ubuntu/voting-app/docker-compose.yaml
        owner: ubuntu
        mode: '0640'
        content: |
          version: '3'
          services:
            voting-app:
              image: {{ docker_image }}
              ports:
                - "5000:5000"
              environment:
                DATABASE_URL: "{{ db_url }}"

    - name: Run Docker Compose
      ansible.builtin.command:
        cmd: sudo docker-compose up -d
        chdir: /home/ubuntu/voting-app
      changed_when: false

    - name: Get container ID of voting app
      ansible.builtin.command:
        cmd: >
          docker ps
          --filter "ancestor=ghcr.io/{{ github_repo }}/voting-app:latest"
          --format "{{ '{{.Names}}' }}"
      register: container_name
      changed_when: false

    - name: Seed the database
      ansible.builtin.command:
        cmd: docker exec {{ container_name.stdout }} python -m backend.seed
      when: seed_db | default(false)
      no_log: true  # Prevents logging DB seed output
      changed_when: false
      failed_when: container_name.stdout == ""
  
  handlers:
    - name: Restart Docker
      ansible.builtin.service:
        name: docker
        state: restarted
